{"version":3,"sources":["logo.svg","components/MenuAppBar.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","ButtonAppBar","classes","className","AppBar","position","Toolbar","Typography","variant","Button","color","Home","props","loadData","url","fetch","then","response","ok","text","Error","data","this","setState","mycode","bind","catch","err","console","log","message","state","extension","UserList","json","jsonData","length","split","toLowerCase","error","Grid","container","item","md","xs","mode","width","readOnly","value","fontSize","src","height","frameborder","marginheight","marginwidth","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mJAAAA,EAAOC,QAAU,IAA0B,kC,6MCSrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,OAIC,SAASK,IACtB,IAAMC,EAAUV,IAEhB,OACE,yBAAKW,UAAWD,EAAQP,MACtB,kBAACS,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACC,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKL,UAAWD,EAAQF,OAA5C,aAGA,kBAACS,EAAA,EAAD,CAAQC,MAAM,e,qBC4DTC,G,0EAjFX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,SAAW,SAACC,GACRC,MAAMD,GACHE,MAAK,SAAUC,GAEd,GAAGA,EAASC,GACV,OAAOD,EAASE,OAElB,MAAM,IAAIC,MAAM,qBAEjBJ,KAAK,SAAUK,GAEdC,KAAKC,SAAS,CAAEC,OAAQH,KACxBI,KAHI,iBAILC,OAAM,SAAUC,GACfC,QAAQC,IAAI,kBAAmBf,EAAKa,EAAIG,aAlB5C,EAAKC,MAAQ,CAACP,OAAQ,GACtBQ,UAAU,IAJK,E,gEA2BfV,KAAKW,a,iCAGK,IAAD,OACTlB,MAAM,2EACXC,MAAK,SAAAC,GAAQ,OAAIA,EAASiB,UAC1BlB,MAAK,SAACmB,GAGyE,KAA3EA,EAASA,EAASC,OAAO,GAAzB,aAA4CC,MAAM,KAAK,GAAGC,eACc,OAA3EH,EAASA,EAASC,OAAO,GAAzB,aAA4CC,MAAM,KAAK,GAAGC,eACiB,OAA3EH,EAASA,EAASC,OAAO,GAAzB,aAA4CC,MAAM,KAAK,GAAGC,cAAwB,EAAKf,SAAS,CAC5FS,UAAY,UAEmE,MAA3EG,EAASA,EAASC,OAAO,GAAzB,aAA4CC,MAAM,KAAK,GAAGC,cAAuB,EAAKf,SAAS,CAACS,UAAU,WAC7G,EAAKT,SAAS,CAACS,UAAYG,EAASA,EAASC,OAAO,GAAzB,aAA4CC,MAAM,KAAK,GAAGC,gBAC1F,EAAKzB,SAASsB,EAASA,EAASC,OAAO,GAAzB,iBAEfV,OAAM,SAACa,GAENX,QAAQW,MAAMA,Q,+BAMV,OACI,oCACA,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAMC,WAAS,GACX,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,6BACA,kBAAC,IAAD,CACAC,KAAMvB,KAAKS,MAAMC,UACjBc,MAAM,OACNpD,MAAM,SACFqD,UAAQ,EACRC,MAAS1B,KAAKS,MAAMP,OACpByB,SAAS,WAMb,kBAACT,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,EAAGC,GAAI,IACtB,4BAAQM,IAAI,oHAAoHJ,MAAM,OAAOK,OAAO,OAAOC,YAAY,IAAIC,aAAa,IAAIC,YAAY,KAAxM,wB,GA1EGC,cCIJC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEd7C,OAAM,SAAAa,GACLX,QAAQW,MAAMA,EAAMT,c","file":"static/js/main.dcfde4ba.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nexport default function ButtonAppBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          \n          <Typography variant=\"h6\" className={classes.title}>\n            AlgoMania\n          </Typography>\n          <Button color=\"inherit\"></Button>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport { Grid } from '@material-ui/core';\nimport MenuAppBar from './MenuAppBar'\nimport AceEditor from 'react-ace';\nimport \"ace-builds/src-noconflict/mode-c_cpp\";\nimport \"ace-builds/src-noconflict/mode-python\";\nimport \"ace-builds/src-noconflict/mode-javascript\";\nimport \"ace-builds/src-noconflict/mode-java\";\n\nclass Home extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {mycode: '',\n        extension:''};\n      }\n\n    loadData = (url) => {\n        fetch(url)\n          .then(function (response) {\n            // console.log(url + \" -> \" + response.ok);\n            if(response.ok){\n              return response.text();\n            }\n            throw new Error('Error message.');\n          })\n          .then(function (data) {\n            // console.log(\"data: \", data);\n            this.setState({ mycode: data });\n          }.bind(this))\n          .catch(function (err) {\n            console.log(\"failed to load \", url, err.message);\n          });\n      }\n\n \n    componentDidMount() {\n        this.UserList();\n      }\n\n      UserList() {\n        fetch('https://api.github.com/repos/includesgsits/AlgoMania-Algorithm/contents')\n  .then(response => response.json())\n  .then((jsonData) => {\n    // jsonData is parsed json object received from url\n    \n    if(jsonData[jsonData.length-1]['download_url'].split(\".\")[3].toLowerCase() == 'c' ||\n    jsonData[jsonData.length-1]['download_url'].split(\".\")[3].toLowerCase() == 'cpp' || \n    jsonData[jsonData.length-1]['download_url'].split(\".\")[3].toLowerCase() == 'c++') this.setState({\n        extension : 'c_cpp'\n    })\n    else if(jsonData[jsonData.length-1]['download_url'].split(\".\")[3].toLowerCase() == 'py') this.setState({extension:'python'})\n    else this.setState({extension : jsonData[jsonData.length-1]['download_url'].split(\".\")[3].toLowerCase()})\n    this.loadData(jsonData[jsonData.length-1]['download_url'])\n  })\n  .catch((error) => {\n    // handle your errors here\n    console.error(error)\n  })\n      }\n\n    render() {\n       \n        return (\n            <>\n            <MenuAppBar />\n            <Grid container>\n                <Grid item md={6} xs={12}>\n                <pre>\n                <AceEditor \n                mode={this.state.extension}\n                width='100%'\n                theme='github'\n                    readOnly\n                    value= { this.state.mycode  }\n                    fontSize='18px'\n                    />\n                \n    </pre>\n                </Grid>\n\n                <Grid item md={6} xs={12}>\n                <iframe src=\"https://docs.google.com/forms/d/e/1FAIpQLSdNLsUI8EeBZtvTEcpg2NBAad51sN4V_GA-WkDQvPJ3YPj9tg/viewform?embedded=true\" width=\"100%\" height=\"100%\" frameborder=\"0\" marginheight=\"0\" marginwidth=\"0\">Loadingâ€¦</iframe>\n                </Grid>\n            \n            </Grid>\n            </>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <div>\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}